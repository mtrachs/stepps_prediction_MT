N_cores = nrow(centers_pol)
buffer = 0#100000
# xlo = min(centers[,1]) - buffer
# xhi = max(centers[,1]) + buffer
# ylo = min(centers[,2]) - buffer
# yhi = max(centers[,2]) + buffer
xlo = min(centers_pls[,1])*rescale - buffer
xhi = max(centers_pls[,1])*rescale + buffer
ylo = min(centers_pls[,2])*rescale - buffer
yhi = max(centers_pls[,2])*rescale + buffer
#   idx.keep  = c(1,2,length(ages)/2,T)
ages.keep = ages[idx.keep]
T.keep    = length(ages.keep)
idx_y = vector(length=0)
for (i in 1:T.keep){
idx_orig   = seq(idx.keep[i], N_cores*T, by=T)
idx_y = c(idx_y, idx_orig)
}
idx_y = sort(idx_y)
y_keep = y[idx_y,]
core_dat = data.frame(x=integer(0), y=integer(0), age=character(), core_sites=integer(0))
for (i in 1:length(ages.keep)){
print(i)
print((N_cores*(i-1) + 1))
y_sub    = y_keep[(N_cores*(i-1) + 1):(N_cores*i),]
idx_data = which(rowSums(y_sub) != 0)
print(idx_data)
core_dat = rbind(core_dat, data.frame(x     = centers_pol[idx_data,1]*rescale,
y     = centers_pol[idx_data,2]*rescale,
age   = rep(ages.keep[i], length(idx_data))
))
}
p <- ggplot() + geom_point(data=core_dat, aes(x=x, y=y), colour='#FF6600', shape=19) +
coord_fixed() #+ scale_x_continuous(limits$xlims) + scale_y_continuous(limits$ylims)
p <- add_map_albers(p, map_data=us.fort, limits)#, xlims=c(xlo,xhi), ylims=c(ylo, yhi))
p <- p + facet_grid(age~.)
#   p <- p + theme(strip.text.x = element_blank(),
#                 strip.text.y = element_blank())
#   p <- p + theme(strip.background = element_blank())
p <- theme_clean(p) + theme(strip.text.y = element_text(size = rel(1.5)),
strip.text.x = element_text(size = rel(1.5)))
Sys.sleep(2)
print(p)
if (save_plots){
fname = paste0(fpath, '/core_locs_', suff, '.pdf')
ggsave(file=fname, scale=1)
sys_str = paste("pdfcrop", fname, fname, sep=' ')
system(sys_str)
}
return(p)
}
add_map_albers <- function(plot_obj, map_data=us.fort, limits){
p <- plot_obj + geom_path(data=map_data, aes(x=long, y=lat, group=group),  colour='grey55') +
#     scale_x_continuous(limits = c(min(umw.coord$x, na.rm=TRUE), max(umw.coord$x, na.rm=TRUE))) +
#     scale_y_continuous(limits = c(min(umw.coord$y, na.rm=TRUE), max(umw.coord$y, na.rm=TRUE)))#, colour = "black", size = 1, fill = "white", aes(x=long, y=lat, group = group))
# #
#     scale_x_continuous(limits = c(min(dat[,1], na.rm=TRUE), max(dat[,1], na.rm=TRUE))) +
#     scale_y_continuous(limits = c(min(dat[,2], na.rm=TRUE), max(dat[,2], na.rm=TRUE)))
scale_x_continuous(limits = limits$xlims*1000000) +
scale_y_continuous(limits = limits$ylims*1000000) #+ coord_map("albers")
return(p)
}
poster_fig <- function(y, y_veg, r_mean, centers_veg, centers_pls, centers_polU, taxa, t, N, K, T, thresh, limits, type, suff, save_plots, fpath=subDir){
if (is.null(taxa)){taxa=seq(1,K)}
props_data = t(apply(y_veg, 1, function(x) x/sum(x)))
K = ncol(y)
N_cores = nrow(centers_polU)
prop_dat = data.frame(props=numeric(0), x=integer(0), y=integer(0), time=character(0), taxon=character())
#   core_dat = data.frame(x=integer(0), y=integer(0), age=character(), core_sites=integer(0))
for (i in 1:length(ages)){
print(i)
print((N_cores*(i-1) + 1))
y_sub    = y[(N_cores*(i-1) + 1):(N_cores*i),]
idx_data = which(rowSums(y_sub) != 0)
print(idx_data)
prop_dat = rbind(prop_dat, data.frame(props = rep(0, length(idx_data)),
x     = centers_polU[idx_data,1]*1000,
y     = centers_polU[idx_data,2]*1000,
time  = rep(ages[i], length(idx_data)),
taxon = rep('cores', length(idx_data))))
}
core_dat = data.frame(x=integer(0), y=integer(0), time=character(0), taxon=character())
#   core_dat = data.frame(x=integer(0), y=integer(0), age=character(), core_sites=integer(0))
for (i in 1:length(ages)){
print(i)
print((N_cores*(i-1) + 1))
y_sub    = y[(N_cores*(i-1) + 1):(N_cores*i),]
idx_data = which(rowSums(y_sub) != 0)
print(idx_data)
core_dat = rbind(core_dat, data.frame(
x     = centers_polU[idx_data,1]*1000,
y     = centers_polU[idx_data,2]*1000,
time  = rep(ages[i], length(idx_data)),
taxon = rep('cores', length(idx_data))))
}
#colnames(props_data) = taxa
#   prop_dat = data.frame(props=numeric(0), x=integer(0), y=integer(0), time=character(0), taxon=character())
for (k in 1:K){
prop_dat = rbind(prop_dat, data.frame(props = props_data[,k],
x     = centers_pls[,1]*1000,
y     = centers_pls[,2]*1000,
time  = rep('pls', times = nrow(centers_pls)),
taxon = rep(taxa[k], nrow(centers_pls))))
}
#   prop_dat = data.frame(props=numeric(0), x=integer(0), y=integer(0),time=integer(0), taxon=character())
for (k in 1:K){
prop_dat = rbind(prop_dat, data.frame(props = r_mean[,k],
x     = rep(centers_veg[,1]*1000, each=T),
y     = rep(centers_veg[,2]*1000, each=T),
time  = rep(as.character(ages),times=N),
taxon = rep(taxa[k], N*T)))
}
if (!is.na(thresh)){
prop_dat$props[which(prop_dat$props > thresh)] = thresh
}
p <- ggplot() + geom_tile(data=prop_dat, aes(x=x, y=y, fill=props)) +
scale_fill_gradientn(colours=tim.colors()) + coord_fixed() +
scale_x_continuous(limits$xlims*1000) + scale_y_continuous(limits$ylims*1000)
p <- add_map_albers(p, us.shp, limits)
p <- p + facet_grid(time~taxon)
p <- theme_clean(p) + theme(strip.text.y = element_text(size = rel(1.5)), strip.text.x = element_text(size = rel(1.5)))
print(p)
p <- p + geom_point(data = core_dat, aes(x=x, y=y))
print(p)
#ggsave(file='figures/pred/pred_plot_test.pdf', scale=1)
Sys.sleep(2)
if (save_plots){
ggsave(file=paste(fpath, '/veg_maps_', suff, '.pdf', sep=''), scale=1)
#     dev.off()
}
return(p)
}
# plot(centers_veg[,1]*1000, centers_veg[,2]*1000, col='blue', pch=19)
# points(centers_pls[,1]*1000, centers_pls[,2]*1000)
#
# us.shp <- readShapeLines('r/data/map_data/us_alb.shp',
#                          proj4string=CRS('+init=epsg:3175'))
# plot(us.shp, add=T, lwd=2)
plot_data_maps <- function(y, centers, taxa, t, N, K, T, thresh, limits, suff, save_plots, fpath=subDir){
rescale=1000000
if (is.null(taxa)){taxa=seq(1,K)}
props_data = t(apply(y, 1, function(x) x/sum(x)))
#colnames(props_data) = taxa
prop_dat = data.frame(props=numeric(0), x=integer(0), y=integer(0), taxon=character())
for (k in 1:K){
prop_dat = rbind(prop_dat, data.frame(props = props_data[,k],
x     = centers[,1]*rescale,
y     = centers[,2]*rescale,
taxon = rep(taxa[k], N)))
}
if (!is.na(thresh)){
prop_dat$props[which(prop_dat$props > thresh)] = thresh
}
prop_dat$type = rep('PLS', nrow(prop_dat))
p <- ggplot() + geom_tile(data=prop_dat, aes(x=x, y=y, fill=props)) +
scale_fill_gradientn(colours=tim.colors(), guide='none') + coord_fixed() +
scale_x_continuous(limits$xlims) + scale_y_continuous(limits$ylims)
p <- add_map_albers(p, us.shp, limits)
p <- p + facet_grid(type~taxon)
p <- theme_clean(p) #+ theme(strip.text.y = element_text(size = rel(1.5)), strip.text.x = element_text(size = rel(1.5)))
p <- p + theme(strip.text.x = element_blank(),
strip.text.y = element_blank())
p <- p + theme(strip.background = element_blank())
print(p)
Sys.sleep(2)
if (save_plots){
ggsave(file=paste(fpath, '/veg_maps_', suff, '.pdf', sep=''), scale=1)
ggsave(file=paste(fpath, '/veg_maps_', suff, '.eps', sep=''), scale=1)
#     dev.off()
}
return(p)
}
plot_data_maps_binned <- function(y, centers, taxa, t, N, K, T, breaks, limits, suff, save_plots, fpath=subDir){
rescale=1000000
if (is.null(taxa)){taxa=seq(1,K)}
props_data = t(apply(y, 1, function(x) if (sum(x) > 0) {x/sum(x)} else {x}))
#colnames(props_data) = taxa
props_data_binned = matrix(0, nrow=nrow(props_data), ncol=ncol(props_data))
colnames(props_data_binned) <- colnames(props_data)
for (i in 1:ncol(props_data)){
props_data_binned[,i] = cut(props_data[,i], breaks, include.lowest=TRUE, labels=FALSE)
}
breaklabels = apply(cbind(breaks[1:(length(breaks)-1)], breaks[2:length(breaks)]), 1,
function(r) { sprintf("%0.2f - %0.2f", r[1], r[2]) })
prop_dat = data.frame(props=numeric(0), x=integer(0), y=integer(0), taxon=character())
for (k in 1:K){
prop_dat = rbind(prop_dat, data.frame(props = props_data_binned[,k],
x     = centers[,1]*rescale,
y     = centers[,2]*rescale,
taxon = rep(taxa[k], N)))
}
prop_dat$type = rep('PLS', nrow(prop_dat))
p <- ggplot() + geom_tile(data=prop_dat, aes(x=x, y=y, fill=factor(props))) +
scale_fill_manual(values = tim.colors(length(breaks)), labels=breaklabels, name='Proportions') +
coord_fixed() +
scale_x_continuous(limits$xlims) + scale_y_continuous(limits$ylims)
p <- add_map_albers(p, us.shp, limits)
p <- p + facet_grid(type~taxon)
p <- theme_clean(p) #+ theme(strip.text.y = element_text(size = rel(1.5)), strip.text.x = element_text(size = rel(1.5)))
p <- p + theme(strip.text.x = element_blank(),
strip.text.y = element_blank())
p <- p + theme(strip.background = element_blank())
print(p)
Sys.sleep(2)
if (save_plots){
fname = paste0(fpath, '/veg_maps_data_binned_', suff, '.pdf')
ggsave(file=fname, scale=1, width=12)
sys_str = paste("pdfcrop", fname, fname, sep=' ')
system(sys_str)
}
return(p)
}
source(paste(help.fun.loc,'pred_plot_funs.r',sep=''))
fit <- read_stan_csv(paste(data.loc,'test.csv',sep=''))
r <- build_r_nb(post_dat=post_dat,N = 754,T=1,K=13)
dim(r)
dim(r$r)
r_mean <- apply(r$r,c(1,2),mean)
dim(r_mean)
load(paste(data.loc,'prediction_13_taxa_754_cells_120_knots_cal_pl_Ka_Kgamma_EPs_90_sites_full_pred.rdata',sep=''))
rm(list=ls(all=TRUE))
#--------------------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------------------
#devtools::install_github("PalEON-Project/stepps-cal")
library(stepps)
library(dplyr)
library(DT)
library(neotoma)
library(fields)
library(sp)
library(rgdal)
library(abind)
library(rstan)
#-----------------------------------------------------------------------------------------------
setwd('~/workflow_stepps_prediction/prediction/')
help.fun.loc <- 'utils/'
data.loc <- 'data/'
plot.loc <- 'plots/'
########################################################################################################################
#read the huge posterior file of the vegetation model
########################################################################################################################
load('~/workflow_stepps_calibration/vegetation/data_township/township_data_13_taxa_6796_cells_120_knots.rdata')
#fit <- read_stan_csv('~/workflow_stepps_calibration/vegetation/output/veg_township_output_v2171_run1.csv')
fit <- read_stan_csv('~/workflow_stepps_calibration/vegetation/output/township_120knots_final.csv')
post <- rstan::extract(fit, permuted=FALSE, inc_warmup=FALSE)
param.names <-colnames(post[,1,]) #find parameter names of posterior
param.greek <- sapply(param.names,function(x) strsplit(x,'[[]')[[1]][1]) #only take greek letter
param.e.bayes <- param.greek%in%c('eta','rho') #only take eta and rho
est.e.bayes <- colMeans(post[,1,param.e.bayes])
eta <- est.e.bayes[grep('eta',names(est.e.bayes))]
rho <- est.e.bayes[grep('rho',names(est.e.bayes))]
########################################################################################################################
# load knot coords
########################################################################################################################
load('~/workflow_stepps_calibration/vegetation/data_township/township_data_13_taxa_6796_cells_120_knots.rdata')
#########################################################################################################################
load('~/workflow_stepps_calibration/calibration/data/elicitation_neus_certainty_median_80_sites_only_abies_new_species.RData')
#pollen_coords
# K
# idx_cores
# N_cores
# d
# y
#N <- N_cells
#------------------------------------------------------------------------------------------------
#produce knots
#------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------
# have to load parameters from calibration model
#--------------------------------------------------------------------------------------------
library(rstan)
source(paste(help.fun.loc,'pred_helper_funs.r',sep='')) #make sure I use medians of a
source(paste(help.fun.loc,'process_funs.r',sep='')) #make sure I use medians of a
# gamma
# a
# b
# phi
# for settlement era, I do not see if it needs a or b, probably not
# in a first sep I will load phi and gamma from power law kernel Ka_Kgamma
source('R/build_cal_main.r') # this is strange....
runs1 <- list(runs[[3]],runs[[4]])
for (run in runs1) {
kernel <- run$kernel
num_a <- run$one_a
one_psi <- run$one_psi
handle <- strsplit(run$suff_fit,'_A')[[1]][1]
#look at that again...
for (i in c(0:2,6,7)) { # would have to change this if not run_pl
if(kernel=='pl'){
if(num_a==FALSE){
fname = paste('~/stepps_13_taxa/output/output_cal_pl_Ka_Kgamma_EPs_',i,'.csv',sep='') #sprintf('%s/%s.csv', path_out, suff_fit)
}
if((num_a==TRUE)&(i<5)){
fname = paste('~/stepps_13_taxa//output/output_cal_pl_',i,'.csv',sep='') #sprintf('%s/%s.csv', path_out, suff_fit)
}
# if(run$a_const==TRUE){
#   fname = paste('~/stepps_13_taxa//output/output_cal_pl_Ka_Kgamma_EPs_',i,'.csv',sep='') #sprintf('%s/%s.csv', path_out, suff_fit)
# }
}
if(kernel=='gaussian'){
if(one_psi==FALSE){
fname = paste('~/stepps_13_taxa/output/output_cal_g_Kpsi_Kgamma_EPs_',i,'.csv',sep='') #sprintf('%s/%s.csv', path_out, suff_fit)
}
if(one_psi==TRUE){
fname = paste('~/stepps_13_taxa/output/output_cal_g_',i,'.csv',sep='') #sprintf('%s/%s.csv', path_out, suff_fit)
}}
fit <- read_stan_csv(fname)
if (i==0)  {post = rstan::extract(fit, permuted=FALSE, inc_warmup=FALSE)}
else{post_new <-  rstan::extract(fit, permuted=FALSE, inc_warmup=FALSE)
post <- abind(post,post_new,along=1)
}
}
}
param.names <-colnames(post[,1,]) #find parameter names of posterior
param.greek <- sapply(param.names,function(x) strsplit(x,'[[]')[[1]][1]) #only take greek letter
param.e.bayes <- param.greek%in%c('gamma','phi') #only take eta and rho
est.e.bayes <- colMeans(post[,1,param.e.bayes])
gamma.all <- est.e.bayes[grep('gamma',names(est.e.bayes))]
gamma <- gamma.all
phi.all <- est.e.bayes[grep('phi',names(est.e.bayes))]
phi <- phi.all
#######################################################################################################################
#load pollen data and coordinates of pollen to make a new idx_files
#######################################################################################################################
y <- readRDS('~/workflow_stepps_prediction/pollen_data/pollen_1700_1800.RDS')
y <- round(y)
pollen_coords <- readRDS('~/workflow_stepps_prediction/pollen_data/coordinates_1700_1800.RDS')
pollen_coords <- matrix(ncol=2,as.numeric(pollen_coords))
sputm <- SpatialPoints(pollen_coords, proj4string=CRS("+init=epsg:4326"))
spgeo <- spTransform(sputm, CRS("+init=epsg:3175"))
pollen_coord_us <- spgeo@coords
######################################################################################################################
# make lwo resolution coordinates
######################################################################################################################
coord.east.unique <- sort(unique(veg_coords[,1]))
coord.north.unique <- sort(unique(veg_coords[,2]))
coord.east.agg <- seq(coord.east.unique[2],coord.east.unique[length(coord.east.unique)],24000)
coord.north.agg <- seq(coord.north.unique[2],coord.north.unique[length(coord.north.unique)],24000)
coord.agg <- expand.grid(coord.east.agg,coord.north.agg)
veg_coords <- data.frame(veg_coords)
colnames(coord.agg) <- c('east','north')
coord.agg <- data.frame(coord.agg)
dist.coords <- rdist(coord.agg,veg_coords)
min.dist.coords <- apply(dist.coords,1,min)
coord.agg.final <- coord.agg[min.dist.coords==0,]
# dist.agg.raw <- rdist(veg_coords,coord.agg.final)
#
# #find point to which distance is mnimal (data is aggregated to data grid point)
# min_dist <-  apply(dist.agg.raw,1,function(x)  which.min(x))
# sort(table(min_dist))# see if the minimum distance is about an equal number of veg_cells contributes to one knot
#######################################################################################################################
N_cells <- nrow(coord.agg.final)
N <- N_cells
dist.cores <- paldist2(pollen_coord_us,coord.agg.final,dist.method = 'euclidean')
idx_cores<- apply(dist.cores,1,function(x) which.min(x))
########################################################################################################################
#make d_pot
########################################################################################################################
gr <- seq(24,700,24)
gr.tot <- c(-rev(gr),0,gr)
grid.tot <- expand.grid(gr.tot,gr.tot)
total.distance <- paldist2(matrix(ncol=2,c(0,0)),grid.tot,dist.method = 'euclidean')
numbers <- table(total.distance)
real.distances <- as.numeric(names(numbers))
d_pot <- cbind(real.distances,numbers)
d_pot <- d_pot[-1,]
d_pot <- d_pot[d_pot[,1]<700,]
d_pot[,1] <-d_pot[,1]/10^3
########################################################################################################################
#these objects need changing (probably best to use functions that makes STEPPS data, no they might re-arrange things)
N_cores <- nrow(pollen_coords)
d <- t(dist.cores)
d <- d/10^6
w <- build_weight_matrix(post = post,d = t(d),idx_cores = idx_cores,
N = N_cells,N_cores =  N_cores,run = run)
sum_w_pot <- build_sumw_pot(post = post, K=K,N_pot = N_pot,
d_pot =  d_pot,run = run)
if(length(gamma)==1) {
gamma <- rep(gamma,K)
w1 <- array(dim=c(K,N_cores,N_cells))
for(i in 1:K) {w1[i,,]<-w}
w <- w1
}
#################################################################################################################
# knot distance matrix
#################################################################################################################
d_inter <- rdist(coord.agg.final,knot_coords)/10^6
d_knots <- rdist(knot_coords,knot_coords)/10^6
#-------------------------------------------------------------------------------------------
# #have to rescale gamma
# # simplest is to build the kernel and add the weight of the 8 closest locations...
# #
# weights_pot <- build_w_pot(post = post, K=K,N_pot = N_pot,d_pot =  d_pot,run = run)
# cbind(weights_pot[,2],d_pot[,2])
# gamma.added <- (weights_pot[1,] + weights_pot[2,]/2)/sum_w_pot
# gamma.new <- gamma + gamma.added
# gamma <- gamma.new
#--------------------------------------------------------------------------------------------
res <- 3 #
ages    = seq(150,1950,100)
T       = length(ages)
lag     = unname(as.matrix(dist(matrix(ages), upper=TRUE)))
#-------------------------------------------------------------------------------------------
num_sites <- nrow(pollen_coord_us)
#--------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------
#store data in .dump file
stan_rdump(
c('K', 'N','T', 'N_knots', 'N_cores','lag',
'y', 'res',
'sum_w_pot',
'rho','eta','gamma','phi',
'idx_cores',
'd','d_knots','d_inter','w'
),
file=paste('~/workflow_stepps_prediction/prediction/data/prediction_',K,'_taxa_',N_cells,'_cells_',N_knots,'_knots_',handle,'_',num_sites,'_sites_full_pred.dump',sep=""))
save(K, N,T, N_knots, N_cores,lag,
y, res,
sum_w_pot,
rho,eta,gamma,phi,
idx_cores,
d,d_knots,d_inter,w
,
file=paste('~/workflow_stepps_prediction/prediction/data/prediction_',K,'_taxa_',N_cells,'_cells_',N_knots,'_knots_',handle,'_',num_sites,'_sites_full_pred.rdata',sep=""))
#################################################################################################################################
#
#################################################################################################################################
#y <- y[seq(1,nrow(y),19),]
T <- 1
stan_rdump(
c('K', 'N','T', 'N_knots', 'N_cores','lag',
'y', 'res',
'sum_w_pot',
'rho','eta','gamma','phi',
'idx_cores',
'd','d_knots','d_inter','w'
),
file=paste('~/workflow_stepps_prediction/prediction/data/prediction_test.dump',sep=""))
save(K, N,T, N_knots, N_cores,lag,
y, res,
sum_w_pot,
rho,eta,gamma,phi,
idx_cores,
d,d_knots,d_inter,w,
coord.agg.final,
file=paste('~/workflow_stepps_prediction/prediction/data/prediction_test.rdata',sep=""))
#########################################################################################################################
#
#########################################################################################################################
library(rstan)
setwd('~/workflow_stepps_prediction/prediction/')
help.fun.loc <- 'utils/'
data.loc <- 'data/'
plot.loc <- 'plots/'
#########################################################################################################################
source(paste(help.fun.loc,'pred_helper_funs.r',sep=''))
source(paste(help.fun.loc,'pred_plot_funs.r',sep=''))
fit <- read_stan_csv(paste(data.loc,'test.csv',sep=''))
post <- rstan::extract(fit, permuted=FALSE, inc_warmup=FALSE)
fit <- read_stan_csv(paste(data.loc,'test.csv',sep=''))
post <- rstan::extract(fit, permuted=FALSE, inc_warmup=FALSE)
var_names<- colnames(post[,1,])
par_names <- sapply(var_names, function(x) unlist(strsplit(x,'[[]'))[1])
post_dat <- list(post = post,par_names = par_names)
r <- build_r_nb(post_dat=post_dat,N = 754,T=1,K=13)
r_mean <- apply(r$r,c(1,2),mean)
load(paste(data.loc,'prediction_test.rdata',sep=''))
taxa
c(0,0.01,0.02,0.05,0.1,0.15,0.2,0.3,0.4,0.5,1)
limits <- list(xlims=range(coord.agg.final$east),ylims=range(coord.agg.final$north))
plot_pred_maps(r_mean=r_mean,
centers = coord.agg.final,
taxa = taxa,
t = 1800,
N = N,
K = K,
T = T,
thresh = c(0,0.01,0.02,0.05,0.1,0.15,0.2,0.3,0.4,0.5,0.6,1),
limits = limits,
type = 'prop',
suff = 'test',
save_plots =TRUE ,
fpath = plot.loc)
#########################################################################################################################
source(paste(help.fun.loc,'pred_helper_funs.r',sep=''))
source(paste(help.fun.loc,'pred_plot_funs.r',sep=''))
fit <- read_stan_csv(paste(data.loc,'test.csv',sep=''))
post <- rstan::extract(fit, permuted=FALSE, inc_warmup=FALSE)
var_names<- colnames(post[,1,])
par_names <- sapply(var_names, function(x) unlist(strsplit(x,'[[]'))[1])
post_dat <- list(post = post,par_names = par_names)
r <- build_r_nb(post_dat=post_dat,N = 754,T=1,K=13)
r_mean <- apply(r$r,c(1,2),mean)
load(paste(data.loc,'prediction_test.rdata',sep=''))
limits <- list(xlims=range(coord.agg.final$east),ylims=range(coord.agg.final$north))
plot_pred_maps(r_mean=r_mean,
centers = coord.agg.final,
taxa = taxa,
t = 1800,
N = N,
K = K,
T = T,
thresh = c(0,0.01,0.02,0.05,0.1,0.15,0.2,0.3,0.4,0.5,0.6,1),
limits = limits,
type = 'prop',
suff = 'test',
save_plots =TRUE ,
fpath = plot.loc)
rgo
rho
eta
