eta1 <- rep(NA,length(taxa))
names(eta1) <- taxa1[-length(taxa1)]
eta1[names(eta1)%in%names(eta)] <- eta
rho1 <- rep(NA,length(taxa))
names(rho1) <- taxa1[-length(taxa1)]
rho1[names(rho1)%in%names(rho)] <- rho
eta1[names(eta1)=='Chestnut'] <- mean(eta)
rho1[names(rho1)=='Chestnut'] <- mean(rho)
#assign for use in .dump file
rho <- rho1
eta <- eta1
#---------------------------------------------------------------------------------------------
#store data in .dump file
stan_rdump(
c('K', 'N','T', 'N_knots', 'N_cores',
'y', 'res',
'sum_w_pot',
'rho','eta','gamma','phi',
'idx_cores',
'd','d_knots','d_inter','w'
),
file=paste('~/workflow_stepps_calibration/vegetation/data/prediction_',K,'_taxa_',N_cells,'_cells_',N_knots,'_knots_',handle,'_',num_sites,'_sites.dump',sep=""))
save(K, N,T, N_knots, N_cores,
y, res,
sum_w_pot,
rho,eta,gamma,phi,
idx_cores,
d,d_knots,d_inter,w
,
file=paste('~/workflow_stepps_calibration/vegetation/data/prediction_',K,'_taxa_',N_cells,'_cells_',N_knots,'_knots_',handle,'_',num_sites,'_sites.rdata',sep=""))
}
})
fit1 <- read_stan_csv('~/stepps_veg_output_nd/crc_d12chas.csv')
post1 <- rstsan::exctract(fit1)
post1 <- rstan::exctract(fit1)
post1 <- rstan::exctract(fit1)
post1 <- rstan::extract(fit1)
dim(post1)
str(post1)
post[,1,]
post1[,1,]
post1
dim(post1)
rho>mean <- colMeans(post1$rho)
rho.mean <- colMeans(post1$rho)
eta.mean <- colMeans(post1$eta)
rho.mean
eta.mean
fit2 <- read_stan_csv('~/workflow_stepps_calibration/vegetation/output/pls_correct_long.csv')
post2 <- rstan::extract(fit2)
rho2.mean <- colMeans(post2$rho)
eta2.mean <- colMeans(post2$eta)
rho2.mean
rho1.mean
rho1.mean <- colMeans(post1$rho)
eta1.mean <- colMeans(post1$eta)
rho1.mean
eta1.mean
eta2.mean
#--------------------------------------------------------------------------------------------------------------------------------------------
#In this script vegetation is prepared to estimate the spatial model
#--------------------------------------------------------------------------------------------------------------------------------------------
library(fields)
library(rstan)
library(stepps)
#-------------------------------------------------------------------------------------------------------------------
setwd('~/workflow_stepps_prediction/vegetation/')
help.fun.loc <- 'helper_funs/'
data.loc <- 'data/'
plot.loc <- 'plots/'
#-------------------------------------------------------------------------------------------------------------------------------------------
#load data that was used for calibration (is the same vegetation data)
#-------------------------------------------------------------------------------------------------------------------------------------------
pls.counts <- read.csv('data/wiki_outputs/plss_composition_alb_v0.9-10.csv')
summary(pls.counts)
summary(rowSums(pls.counts))
head(pls.counts)
summary(rowSums(pls.counts[,-(1:3)]))
pls_table <- readr::read_csv('~/workflow_stepps_calibration/calibration/data/veg_trans_edited_pls.csv')
pls_trans <- translate_taxa(pls.counts, pls_table ,id_cols = colnames(pls.counts)[1:3])
y <- pls_trans[,-c(1:3)]
veg_coords <-pls_trans[,c('x','y')]
#--------------------------------------------------------------------------------------------------------------------------------------------------
# extract coordinates of knots through k-means
# use k-means becasue ti estiamtes a center of the coordinates
#-----------------------------------------------------------------------------------------------------------------------------------------------
clust_n <- 260
knot_coords = kmeans(veg_coords, clust_n)$centers
knot_coords = unname(knot_coords)
N_knots     = dim(knot_coords)[1]
K <- ncol(y)
d <- rdist(veg_coords,veg_coords)/10^6
#-------------------------------------------------------------------------------------------------------------------
plot(veg_coords,pch = 16,cex = 0.5)
points(lnot_coords,col=2,pch =16)
points(knot_coords,col=2,pch =16)
x11()
#-------------------------------------------------------------------------------------------------------------------
plot(veg_coords,pch = 16,cex = 0.5)
points(knot_coords,col=2,pch =16)
abline(v = 10000)
abline(v = 200000)
abline(v = 20000)
abline(v = 40000)
abline(h = 105000)
abline(h = 1050000)
abline(h = 825000)
abline(v = 201000)
abline(v = 210000)
abline(v = 230000)
unique(pls.counts$x)
sort(unique(pls.counts$x))
sort(unique(pls.counts$y))
daten <- data.frame(x = c(45000,237000),y=c(1054000,822000))
lm(y~x,data=daten)
lm.cord$coef
lm.cord <- lm(y~x,data=daten)
plot(veg_coords,pch = 16,cex = 0.5)
points(knot_coords,col=2,pch =16)
abline(a=lm.cord$coefficients[1],b = lm.cord$coefficients[2],col=4,lwd=2)
pred.data <- data.frame(x = xs[((xs>=min(daten$x))&(xs<=max(daten$x)))])
xs <- sort(unique(pls.counts$x))
ys <- sort(unique(pls.counts$y))
daten <- data.frame(x = c(45000,237000),y=c(1054000,822000))
lm.cord <- lm(y~x,data=daten)
plot(veg_coords,pch = 16,cex = 0.5)
points(knot_coords,col=2,pch =16)
abline(a=lm.cord$coefficients[1],b = lm.cord$coefficients[2],col=4,lwd=2)
pred.data <- data.frame(x = xs[((xs>=min(daten$x))&(xs<=max(daten$x)))])
pred.data
x.data <- data.frame(x = xs[((xs>=min(daten$x))&(xs<=max(daten$x)))])
y.pred <- predict(lm.cord,x.data)
y.pred
plot(veg_coords,pch = 16,cex = 0.5)
points(knot_coords,col=2,pch =16)
abline(a=lm.cord$coefficients[1],b = lm.cord$coefficients[2],col=4,lwd=2)
points(x.data,y.pred,col=3,pch = 16)
x.data
points(x.data,as.matrixx(y.pred),col=3,pch = 16)
points(x.data,as.matrix(y.pred),col=3,pch = 16)
length(y.pred)
points(x.data,t(y.pred),col=3,pch = 16)
points(t(x.data),y.pred,col=3,pch = 16)
xs
ys
daten <- data.frame(x = c(45000,245000),y=c(1054000,814000))
lm.cord <- lm(y~x,data=daten)
x.data <- data.frame(x = xs[((xs>=min(daten$x))&(xs<=max(daten$x)))])
y.pred <- predict(lm.cord,x.data)
plot(veg_coords,pch = 16,cex = 0.5)
points(knot_coords,col=2,pch =16)
abline(a=lm.cord$coefficients[1],b = lm.cord$coefficients[2],col=4,lwd=2)
points(t(x.data),y.pred,col=3,pch = 16)
coord.reg <- data.frame(x = x.data,y = y.pred)
((pls.counts$x <= coord.reg$x) & (pls.counts$y<=coord.reg$y))
pls.counts$x
pls.counts$x <= coord.reg$x
((pls.counts$x <= rep(coord.reg$x[1],nrow(pls.counts))) & (pls.counts$y<= rep(coord.reg$y[1],nrow(pls.counts))))
sum((pls.counts$x <= rep(coord.reg$x[1],nrow(pls.counts))) & (pls.counts$y<= rep(coord.reg$y[1],nrow(pls.counts))))
veg_coords[((pls.counts$x <= rep(coord.reg$x[1],nrow(pls.counts))) &
(pls.counts$y<= rep(coord.reg$y[1],nrow(pls.counts)))),]
hae <- veg_coords[((pls.counts$x <= rep(coord.reg$x[1],nrow(pls.counts))) &
(pls.counts$y<= rep(coord.reg$y[1],nrow(pls.counts)))),]
points(hae,col='pink')
points(hae,col='pink',pch =  16)
(pls.counts$x <= coord.reg$x[1])
hae <- veg_coords[((pls.counts$x <= coord.reg$x[1]) &
(pls.counts$y <= coord.reg$y[1])),]
points(hae,col='pink',pch =  16)
hae
plot(veg_coords,pch = 16,cex = 0.5)
points(knot_coords,col=2,pch =16)
abline(a=lm.cord$coefficients[1],b = lm.cord$coefficients[2],col=4,lwd=2)
points(t(x.data),y.pred,col=3,pch = 16)
coord.reg <- data.frame(x = x.data,y = y.pred)
hae <- veg_coords[((pls.counts$x <= coord.reg$x[1]) &
(pls.counts$y <= coord.reg$y[1])),]
points(hae,col='pink',pch =  16)
coord.reg$x
plot(veg_coords,pch = 16,cex = 0.5)
points(knot_coords,col=2,pch =16)
abline(a=lm.cord$coefficients[1],b = lm.cord$coefficients[2],col=4,lwd=2)
points(t(x.data),y.pred,col=3,pch = 16)
coord.reg <- data.frame(x = x.data,y = y.pred)
hae <- veg_coords[((veg_coords$x <= coord.reg$x[1]) &
(veg_coords$y <= coord.reg$y[1])),]
points(hae,col='pink',pch =  16)
hae <- sapply(1:nrow(coord.reg),function(x) {
veg_coords[((veg_coords$x <= coord.reg$x[x]) &
(veg_coords$y <= coord.reg$y[x])),]
})
hae
hae <- sapply(1:nrow(coord.reg),function(x) {
which((veg_coords$x <= coord.reg$x[x]) &
(veg_coords$y <= coord.reg$y[x]))
})
hae
unique(unlist(hae))
hae1 <- unique(unlist(hae))
points(veg_coords[hae1,],col='pink',pch =  16)
hae <- sapply(1:nrow(coord.reg),function(x) {
which(((veg_coords$x <= coord.reg$x[x]) &
(veg_coords$y <= coord.reg$y[x]))| (veg_coords$x <= min(coord.reg$x)))
})
hae1 <- unique(unlist(hae))
points(veg_coords[hae1,],col='pink',pch =  16)
pls_trans <- pls_trans[-remove,]
pls_trans <- pls_trans[-remove1,]
remove <- sapply(1:nrow(coord.reg),function(x) {
which(((veg_coords$x <= coord.reg$x[x]) &
(veg_coords$y <= coord.reg$y[x]))| (veg_coords$x <= min(coord.reg$x)))
})
remove1 <- unique(unlist(remove))
pls_trans <- pls_trans[-remove1,]
veg_coords <- pls_trans[,1:2]
veg_coords
rm(list=ls(all=TRUE))
library(fields)
library(rstan)
library(stepps)
#-------------------------------------------------------------------------------------------------------------------
setwd('~/workflow_stepps_prediction/vegetation/')
help.fun.loc <- 'helper_funs/'
data.loc <- 'data/'
plot.loc <- 'plots/'
#-------------------------------------------------------------------------------------------------------------------------------------------
#load data that was used for calibration (is the same vegetation data)
#-------------------------------------------------------------------------------------------------------------------------------------------
pls.counts <- read.csv('data/wiki_outputs/plss_composition_alb_v0.9-10.csv')
#merge species into other hardwood and other conifer
#colnames(pls.counts)
pls_table <- readr::read_csv('~/workflow_stepps_calibration/calibration/data/veg_trans_edited_pls.csv')
pls_trans <- translate_taxa(pls.counts, pls_table ,id_cols = colnames(pls.counts)[1:3])
veg_coords <-pls_trans[,c('x','y')]
#----------------------------------------------------------------------------------------------------------------------
#code to eliminate scarce parts of the data matrix
xs <- sort(unique(pls.counts$x))
ys <- sort(unique(pls.counts$y))
daten <- data.frame(x = c(45000,245000),y=c(1054000,814000))
lm.cord <- lm(y~x,data=daten)
x.data <- data.frame(x = xs[((xs>=min(daten$x))&(xs<=max(daten$x)))])
y.pred <- predict(lm.cord,x.data)
coord.reg <- data.frame(x = x.data,y = y.pred)
remove <- sapply(1:nrow(coord.reg),function(x) {
which(((veg_coords$x <= coord.reg$x[x]) &
(veg_coords$y <= coord.reg$y[x]))| (veg_coords$x <= min(coord.reg$x)))
})
remove1 <- unique(unlist(remove))
pls_trans <- pls_trans[-remove1,]
y <- pls_trans[,-c(1:3)]
veg_coords <- pls_trans[,1:2]
plot(veg_coords,pch = 16)
#--------------------------------------------------------------------------------------------------------------------------------------------------
# extract coordinates of knots through k-means
# use k-means becasue ti estiamtes a center of the coordinates
#-----------------------------------------------------------------------------------------------------------------------------------------------
clust_n <- 260
knot_coords = kmeans(veg_coords, clust_n)$centers
knot_coords = unname(knot_coords)
N_knots     = dim(knot_coords)[1]
K <- ncol(y)
d <- rdist(veg_coords,veg_coords)/10^6
#-------------------------------------------------------------------------------------------------------------------
plot(veg_coords,pch = 16,cex = 0.5)
points(knot_coords,col=2,pch =16)
#-------------------------------------------------------------------------------------------------------------------------------
# new d_inter
#-------------------------------------------------------------------------------------------------------------------------------
d_inter <- rdist(veg_coords,knot_coords)/10^6
d_knots <- rdist(knot_coords,knot_coords)/10^6
apply(d_knots,2,min)
d_knots1 <- dknots
d_knots1 <- d_knots
diag(d_knots) <- 1000000
apply(d_knots,2,min)
dim(1000*apply(d_knots,2,min))
summary(1000*apply(d_knots,2,min))
rm(list=ls(all=TRUE))
library(fields)
library(rstan)
library(stepps)
#-------------------------------------------------------------------------------------------------------------------
setwd('~/workflow_stepps_prediction/vegetation/')
help.fun.loc <- 'helper_funs/'
data.loc <- 'data/'
plot.loc <- 'plots/'
#-------------------------------------------------------------------------------------------------------------------------------------------
#load data that was used for calibration (is the same vegetation data)
#-------------------------------------------------------------------------------------------------------------------------------------------
pls.counts <- read.csv('data/wiki_outputs/plss_composition_alb_v0.9-10.csv')
#merge species into other hardwood and other conifer
#colnames(pls.counts)
pls_table <- readr::read_csv('~/workflow_stepps_calibration/calibration/data/veg_trans_edited_pls.csv')
pls_trans <- translate_taxa(pls.counts, pls_table ,id_cols = colnames(pls.counts)[1:3])
veg_coords <-pls_trans[,c('x','y')]
#----------------------------------------------------------------------------------------------------------------------
#code to eliminate scarce parts of the data matrix
xs <- sort(unique(pls.counts$x))
ys <- sort(unique(pls.counts$y))
daten <- data.frame(x = c(45000,245000),y=c(1054000,814000))
lm.cord <- lm(y~x,data=daten)
x.data <- data.frame(x = xs[((xs>=min(daten$x))&(xs<=max(daten$x)))])
y.pred <- predict(lm.cord,x.data)
coord.reg <- data.frame(x = x.data,y = y.pred)
remove <- sapply(1:nrow(coord.reg),function(x) {
which(((veg_coords$x <= coord.reg$x[x]) &
(veg_coords$y <= coord.reg$y[x]))| (veg_coords$x <= min(coord.reg$x)))
})
remove1 <- unique(unlist(remove))
pls_trans <- pls_trans[-remove1,]
y <- pls_trans[,-c(1:3)]
veg_coords <- pls_trans[,1:2]
plot(veg_coords,pch = 16)
#--------------------------------------------------------------------------------------------------------------------------------------------------
# extract coordinates of knots through k-means
# use k-means becasue ti estiamtes a center of the coordinates
#-----------------------------------------------------------------------------------------------------------------------------------------------
clust_n <- 260
knot_coords = kmeans(veg_coords, clust_n)$centers
knot_coords = unname(knot_coords)
N_knots     = dim(knot_coords)[1]
K <- ncol(y)
d <- rdist(veg_coords,veg_coords)/10^6
#-------------------------------------------------------------------------------------------------------------------
plot(veg_coords,pch = 16,cex = 0.5)
points(knot_coords,col=2,pch =16)
#-------------------------------------------------------------------------------------------------------------------------------
# new d_inter
#-------------------------------------------------------------------------------------------------------------------------------
d_inter <- rdist(veg_coords,knot_coords)/10^6
d_knots <- rdist(knot_coords,knot_coords)/10^6
##############################################################################################################################
N = dim(veg_coords)[1]
x = matrix(1, nrow=N, ncol=1)
N_p = N
temp = qr(x)
Q = qr.Q(temp)
R = qr.R(temp)
P = Q %*% t(Q)
# M = diag(N) - P
if (all(P-P[1,1]<1.0e-12)){
P = P[1,1]
N_p = 1
}
##########################################################################################################################
## chunk: save data to file
##########################################################################################################################
taxa <- colnames(y)
stan_rdump(c('K', 'N', 'N_knots',
'y',
'd_knots', 'd_inter',
'P', 'N_p'),
file=paste('data/pls_data_', K, '_taxa_', N, '_cells_', N_knots, '_knots.dump',sep=""))
# K = number of species, N = number of vegetation grid points,N_knots = number of knots
# y = vegetation data (rounded to real number), d_knots = distance matrix among knots, d_inter = distance matrix between knots and vegetation grid cells
# N_p = N, P = N x N matrix all values the same
save(K, N, N_knots,
y,
d, d_knots, d_inter,
P, N_p,
veg_coords, knot_coords, taxa,
file=paste('data/pls_data_', K, '_taxa_', N, '_cells_', N_knots, '_knots.rdata',sep=""))
rm(list=ls(all=TRUE))
#--------------------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------------------
#devtools::install_github("PalEON-Project/stepps-cal")
library(stepps)
library(dplyr)
library(DT)
library(neotoma)
library(sp)
library(fields)
library(rgdal)
library(abind)
#-----------------------------------------------------------------------------------------------
setwd('~/workflow_stepps_calibration/prediction/')
help.fun.loc <- 'utils/'
data.loc <- 'data/'
plot.loc <- 'plots/'
stepps_input <- load('~/workflow_stepps_prediction/prediction/data/elicitation_neus_certainty_median.RData')
y_pollen <- y
#pollen_coords
K
idx_cores
N_cores
d
y
N <- N_cells
taxa <- colnames(y)
#------------------------------------------------------------------------------------------------
#produce knots
#------------------------------------------------------------------------------------------------
clust_n <- 230
knot_coords = kmeans(veg_coords, clust_n)$centers
knot_coords = unname(knot_coords)
N_knots     = dim(knot_coords)[1]
#-------------------------------------------------------------------------------------------------------------------------------
# new d_inter
#-------------------------------------------------------------------------------------------------------------------------------
d_inter <- rdist(veg_coords,knot_coords)/10^6
d_knots <- rdist(knot_coords,knot_coords)/10^6
dknots1 <- dknots
dknots1 <- d_knots
diag(knots1) <- 100000000
diag(k_nots1) <- 100000000
diag(d_knots1) <- 100000000
diag(dknots1) <- 100000000
apply(dknots1,2,min)
summary(1000*apply(dknots1,2,min))
#------------------------------------------------------------------------------------------------
#produce knots
#------------------------------------------------------------------------------------------------
clust_n <- 260
knot_coords = kmeans(veg_coords, clust_n)$centers
knot_coords = unname(knot_coords)
N_knots     = dim(knot_coords)[1]
#-------------------------------------------------------------------------------------------------------------------------------
# new d_inter
#-------------------------------------------------------------------------------------------------------------------------------
d_inter <- rdist(veg_coords,knot_coords)/10^6
d_knots <- rdist(knot_coords,knot_coords)/10^6
dknots1 <- d_knots
diag(dknots1) <- 100000000
summary(1000*apply(dknots1,2,min))
#--------------------------------------------------------------------------------------------------------------------------------------------
#In this script vegetation is prepared to estimate the spatial model
#--------------------------------------------------------------------------------------------------------------------------------------------
library(fields)
library(rstan)
library(stepps)
#-------------------------------------------------------------------------------------------------------------------
setwd('~/workflow_stepps_prediction/vegetation/')
help.fun.loc <- 'helper_funs/'
data.loc <- 'data/'
plot.loc <- 'plots/'
#-------------------------------------------------------------------------------------------------------------------------------------------
#load data that was used for calibration (is the same vegetation data)
#-------------------------------------------------------------------------------------------------------------------------------------------
pls.counts <- read.csv('data/wiki_outputs/plss_composition_alb_v0.9-10.csv')
#merge species into other hardwood and other conifer
#colnames(pls.counts)
pls_table <- readr::read_csv('~/workflow_stepps_calibration/calibration/data/veg_trans_edited_pls.csv')
pls_trans <- translate_taxa(pls.counts, pls_table ,id_cols = colnames(pls.counts)[1:3])
veg_coords <-pls_trans[,c('x','y')]
#----------------------------------------------------------------------------------------------------------------------
#code to eliminate scarce parts of the data matrix
xs <- sort(unique(pls.counts$x))
ys <- sort(unique(pls.counts$y))
daten <- data.frame(x = c(45000,245000),y=c(1054000,814000))
lm.cord <- lm(y~x,data=daten)
x.data <- data.frame(x = xs[((xs>=min(daten$x))&(xs<=max(daten$x)))])
y.pred <- predict(lm.cord,x.data)
coord.reg <- data.frame(x = x.data,y = y.pred)
remove <- sapply(1:nrow(coord.reg),function(x) {
which(((veg_coords$x <= coord.reg$x[x]) &
(veg_coords$y <= coord.reg$y[x]))| (veg_coords$x <= min(coord.reg$x)))
})
remove1 <- unique(unlist(remove))
pls_trans <- pls_trans[-remove1,]
y <- pls_trans[,-c(1:3)]
veg_coords <- pls_trans[,1:2]
plot(veg_coords,pch = 16)
#--------------------------------------------------------------------------------------------------------------------------------------------------
# extract coordinates of knots through k-means
# use k-means becasue ti estiamtes a center of the coordinates
#-----------------------------------------------------------------------------------------------------------------------------------------------
clust_n <- 260
knot_coords = kmeans(veg_coords, clust_n)$centers
knot_coords = unname(knot_coords)
N_knots     = dim(knot_coords)[1]
K <- ncol(y)
d <- rdist(veg_coords,veg_coords)/10^6
#-------------------------------------------------------------------------------------------------------------------
plot(veg_coords,pch = 16,cex = 0.5)
points(knot_coords,col=2,pch =16)
#-------------------------------------------------------------------------------------------------------------------------------
# new d_inter
#-------------------------------------------------------------------------------------------------------------------------------
d_inter <- rdist(veg_coords,knot_coords)/10^6
d_knots <- rdist(knot_coords,knot_coords)/10^6
##############################################################################################################################
N = dim(veg_coords)[1]
x = matrix(1, nrow=N, ncol=1)
N_p = N
temp = qr(x)
Q = qr.Q(temp)
R = qr.R(temp)
P = Q %*% t(Q)
# M = diag(N) - P
if (all(P-P[1,1]<1.0e-12)){
P = P[1,1]
N_p = 1
}
##########################################################################################################################
## chunk: save data to file
##########################################################################################################################
taxa <- colnames(y)
stan_rdump(c('K', 'N', 'N_knots',
'y',
'd_knots', 'd_inter',
'P', 'N_p'),
file=paste('data/pls_data_', K, '_taxa_', N, '_cells_', N_knots, '_knots.dump',sep=""))
# K = number of species, N = number of vegetation grid points,N_knots = number of knots
# y = vegetation data (rounded to real number), d_knots = distance matrix among knots, d_inter = distance matrix between knots and vegetation grid cells
# N_p = N, P = N x N matrix all values the same
save(K, N, N_knots,
y,
d, d_knots, d_inter,
P, N_p,
veg_coords, knot_coords, taxa,
file=paste('data/pls_data_', K, '_taxa_', N, '_cells_', N_knots, '_knots.rdata',sep=""))
